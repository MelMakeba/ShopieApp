// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String
  role            UserRole     @default(USER)
  status          UserStatus    @default(ACTIVE)
  resetToken      String?
  resetTokenExpiry DateTime?
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Existing relationships
  Cart            Cart[]
  
  // Add this new relationship
  Order           Order[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  stock       Int       @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
  @@index([name], name: "idx_product_name")
  Order Order[]
  CartItem CartItem[]
  OrderItem OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  totalAmount     Float
  status          String      @default("PENDING") // PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
  shippingAddress String?
  paymentMethod   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id])
  OrderItem       OrderItem[]

  Product Product[]
}

model Cart {
  id         String     @id @default(uuid())
  userId     String
  totalPrice Decimal    @db.Decimal(10, 2) @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("carts")
  @@index([userId], name: "idx_cart_user_id")
  CartItem CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
  @@index([cartId], name: "idx_cart_item_cart_id")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  totalPrice  Float
  
  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

